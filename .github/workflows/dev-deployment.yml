name: Build and deploy

on:
  push:
    branches: [ master, develop ]

jobs:
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

  unique_id:
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}

  install-build-and-push:
    runs-on: ubuntu-latest
    needs: [cancel-previous, unique_id]
    steps:
    - uses: actions/checkout@v2
    - name: Get the tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build & push docker images
      env:
        BUILD_ID: ${{needs.unique_id.outputs.unique_id}}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$BUILD_ID -f docker/dev/Dockerfile .
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$BUILD_ID 
    
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: ArgoCD login
      uses: clowdhaus/argo-cd-action/@main
      id: argocd_login
      with:
        command: login ${{ secrets.ARGOCD_DEV_URL }}
        options: --insecure --password ${{ secrets.ARGOCD_DEV_PASS }} --username ${{ secrets.ARGOCD_DEV_USERNAME }}
    
    - name: ArgoCD overvrite values.yaml
      uses: clowdhaus/argo-cd-action/@main
      id: argocd_image_tag_overwrite
      with:
        command: app set iam-org-creator
        options: -p image.tag=${{needs.unique_id.outputs.unique_id}}
